package accounts

import (
	"testing"

	"github.com/davebryson/menta/crypto"
	"github.com/stretchr/testify/assert"
)

// Test accounts generated by GenerateJsonAccounts()
var data = []byte(`[
	"584793d26042deac53c52dbaf8faf48691ce93e9beee7470a3f3118ec3a69a583c811f9faa02f0800d33d5b25e22bb42e5caa326c67b96be158e7907a74df135",
	"cf5013a98d020e948bb144940619e8cd84280c9380e6c85d18130c8af91907867c6d4b7df69679ae6b04d01442b5497373527f721323c2ceb11d90ba590f3794"
]`)

func TestJsonStuff(t *testing.T) {
	assert := assert.New(t)
	b, err := LoadJSONAccounts(data)
	assert.Nil(err)
	assert.Equal(2, len(b))

	// Build a lookup table for the test
	table := make(map[string]Account, 0)
	for _, a := range b {
		pk, err := crypto.PublicKeyFromBytes(a.Pubkey)
		assert.Nil(err)
		address := AddressFromPubKey(pk).ToHex()
		table[address] = a
	}

	// Sign with this key
	bob, err := crypto.PrivateKeyFromHex("584793d26042deac53c52dbaf8faf48691ce93e9beee7470a3f3118ec3a69a583c811f9faa02f0800d33d5b25e22bb42e5caa326c67b96be158e7907a74df135")
	assert.Nil(err)
	sig := bob.Sign([]byte("hello"))

	// Now look up accounts by address
	bobAddress := AddressFromPubKey(bob.PubKey()).ToHex()
	k := table[bobAddress].Pubkey

	// Verify signature via the account public key
	apk, err := crypto.PublicKeyFromBytes(k)
	assert.Nil(err)
	assert.True(apk.Verify([]byte("hello"), sig))
}
